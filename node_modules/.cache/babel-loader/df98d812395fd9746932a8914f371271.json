{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\UDEMY\\\\Interview\\\\react-Wowcher-Test\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Datatable from './datatable';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [query, setQuery] = useState([]);\n  useEffect(() => {\n    fetch('./api/branch1.json').then(response => {\n      return response.json();\n    }).then(data => {\n      const Data = data.products;\n      const transformedData = Data.map(product => {\n        return {\n          id: product.id,\n          key: Math.random(),\n          productName: product.name,\n          unitPrice: product.unitPrice,\n          soldQuantity: product.sold\n        };\n      });\n      console.log(transformedData);\n      setData(transformedData);\n    });\n  }, []);\n  const map = new Map();\n  const BranchValues = [...Branch1, ...Branch2];\n  console.log(BranchValues); // for(const obj of BranchValues) {\n  //   if(!map.has(obj.productName)) {\n  //     map.set(obj.productName, obj);\n  //   } else {\n  //     map.set(obj.productName, {\n  //       ...map.get(obj.productName),\n  //       ...obj,\n  //     });\n  //   }\n  // }\n  // // 4. get new merged unqiue array\n  // const finalBranchValues = [...map.values()];\n\n  function sortOn(property) {\n    return function (a, b) {\n      if (a[property] < b[property]) {\n        return -1;\n      } else if (a[property] > b[property]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    };\n  }\n\n  BranchValues.sort(sortOn('name'));\n  let finalBranchValues = BranchValues.reduce((accumulator, cur) => {\n    let productName = cur.name;\n    var found = accumulator.find(elem => elem.name === productName);\n    console.log(found, found.sold);\n    if (found) found.sold += cur.sold;else accumulator.push(cur);\n    return accumulator;\n  }, []);\n  console.log(finalBranchValues);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"product-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Search Products\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Datatable, {\n    data: BranchValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;\nconst Branch1 = [{\n  id: '056',\n  name: 'Sprouts',\n  unitPrice: 13.8,\n  sold: 117\n}, {\n  id: '069',\n  name: 'Atemoya',\n  unitPrice: 5.34,\n  sold: 83\n}, {\n  id: '052',\n  name: 'Mulberries',\n  unitPrice: 5.48,\n  sold: 114\n}];\nconst Branch2 = [{\n  id: '040',\n  name: 'Sprouts',\n  unitPrice: 13.8,\n  sold: 1177\n}, {\n  id: '041',\n  name: 'Atemoya',\n  unitPrice: 5.34,\n  sold: 834\n}, {\n  id: '042',\n  name: 'Mulberries',\n  unitPrice: 5.48,\n  sold: 1194\n}];","map":{"version":3,"sources":["C:/Users/HP/Desktop/UDEMY/Interview/react-Wowcher-Test/src/App.js"],"names":["React","useState","useEffect","Datatable","App","data","setData","query","setQuery","fetch","then","response","json","Data","products","transformedData","map","product","id","key","Math","random","productName","name","unitPrice","soldQuantity","sold","console","log","Map","BranchValues","Branch1","Branch2","sortOn","property","a","b","sort","finalBranchValues","reduce","accumulator","cur","found","find","elem","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Datatable from './datatable'\n\nimport './App.css'\n\nfunction App() {\n  const [data, setData] = useState([])\n  const [query, setQuery] = useState([])\n\n  useEffect(() => {\n    fetch('./api/branch1.json')\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        const Data = data.products\n        const transformedData = Data.map((product) => {\n          return {\n            id: product.id,\n            key:Math.random(),\n            productName: product.name,\n            unitPrice: product.unitPrice,\n            soldQuantity: product.sold,\n          }\n        })\n        console.log(transformedData)\n        setData(transformedData)\n      })\n  }, [])\n\n  const map = new Map()\n\n  const BranchValues = [...Branch1, ...Branch2]\n  console.log(BranchValues)\n\n  // for(const obj of BranchValues) {\n  //   if(!map.has(obj.productName)) {\n\n  //     map.set(obj.productName, obj);\n  //   } else {\n\n  //     map.set(obj.productName, {\n  //       ...map.get(obj.productName),\n  //       ...obj,\n  //     });\n  //   }\n  // }\n\n  // // 4. get new merged unqiue array\n  // const finalBranchValues = [...map.values()];\n\n  function sortOn(property) {\n    return function (a, b) {\n      if (a[property] < b[property]) {\n        return -1\n      } else if (a[property] > b[property]) {\n        return 1\n      } else {\n        return 0\n      }\n    }\n  }\n\n  \n\n  BranchValues.sort(sortOn('name'))\n\n  let finalBranchValues = BranchValues.reduce((accumulator, cur) => {\n    let productName = cur.name;\n\n    var found = accumulator.find(elem => elem.name === productName)\n    console.log(found,found.sold)\n    if (found) \n      found.sold += cur.sold;\n    else \n      accumulator.push(cur);\n    return accumulator;\n  }, []);\n  \n  console.log(finalBranchValues)\n\n  return (\n    <div className=\"product-list\">\n      <div>\n        <label>Search Products</label>\n        <input type=\"text\" />\n      </div>\n      <div>\n        <Datatable data={BranchValues} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\nconst Branch1 = [\n  {\n    id: '056',\n    name: 'Sprouts',\n    unitPrice: 13.8,\n    sold: 117,\n  },\n  {\n    id: '069',\n    name: 'Atemoya',\n    unitPrice: 5.34,\n    sold: 83,\n  },\n  {\n    id: '052',\n    name: 'Mulberries',\n    unitPrice: 5.48,\n    sold: 114,\n  }\n]\n\n\n\n\n\n\n\n\n\n\nconst Branch2 = [\n  {\n    id: '040',\n    name: 'Sprouts',\n    unitPrice: 13.8,\n    sold: 1177,\n  },\n  {\n    id: '041',\n    name: 'Atemoya',\n    unitPrice: 5.34,\n    sold: 834,\n  },\n  {\n    id: '042',\n    name: 'Mulberries',\n    unitPrice: 5.48,\n    sold: 1194,\n  }\n]\n"]},"metadata":{},"sourceType":"module"}